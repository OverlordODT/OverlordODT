import asyncio
import sqlite3
import os
from datetime import datetime
from telethon import TelegramClient, events, Button
from telethon.errors import ChannelPrivateError, UserNotParticipantError
import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('cheat_bot_session', config.API_ID, config.API_HASH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        subscribed_tgk INTEGER DEFAULT 0,
        subscribed_chat INTEGER DEFAULT 0,
        subscribed_bio INTEGER DEFAULT 0,
        last_check TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_subscription_keyboard():
    return [
        [Button.url("üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¢–ì–ö", config.CHANNEL_LINKS['tgk'])],
        [Button.url("üí¨ –ó–∞–π–¥–∏—Ç–µ –≤ —á–∞—Ç", config.CHANNEL_LINKS['chat'])], 
        [Button.url("‚≠ê –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ BIO", config.CHANNEL_LINKS['bio'])],
        [Button.inline("‚úÖ –ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£", b"check_subscription")]
    ]

# –ö–æ–º–∞–Ω–¥–∞ /start
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user = await event.get_sender()
    
    conn = sqlite3.connect('subscriptions.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
        (user.id, user.username, user.first_name)
    )
    conn.commit()
    conn.close()
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KitRit‚Ç∏Hack!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∏—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
        "üì¢ @kitrite - –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª\n"
        "üí¨ @kitritchat - –ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n" 
        "‚≠ê @kitritpidor - BIO –∫–∞–Ω–∞–ª\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£'\n\n"
        "‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug"
    )
    
    await event.reply(
        welcome_text,
        buttons=get_subscription_keyboard()
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_subscription(user_id):
    try:
        results = {}
        
        for channel_name, channel_link in config.CHANNEL_LINKS.items():
            try:
                entity = await client.get_entity(channel_link)
                
                try:
                    participant = await client.get_permissions(entity, user_id)
                    results[channel_name] = participant is not None
                    
                except (ChannelPrivateError, UserNotParticipantError):
                    results[channel_name] = False
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel_name}: {e}")
                results[channel_name] = False
        
        conn = sqlite3.connect('subscriptions.db')
        cursor = conn.cursor()
        
        for channel_name, is_subscribed in results.items():
            cursor.execute(
                f"UPDATE users SET subscribed_{channel_name} = ? WHERE user_id = ?",
                (1 if is_subscribed else 0, user_id)
            )
        
        conn.commit()
        conn.close()
        
        return all(results.values())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
async def send_cheat_files(user_id):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–∏—Ç–∞
        await client.send_file(
            user_id,
            'KitRit-Premium-Version-0.5.0.1.lua',
            caption=(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —á–∏—Ç—É!\n\n"
                "‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–π —á–∏—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 48 —á–∞—Å–æ–≤\n"
                "‚Ä¢ –ü–æ—Å–ª–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ\n"
                "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Å–ª–µ—Ç–∞ –∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
                "  üíµ –ó–∞ 1$ —á–µ—Ä–µ–∑ @send\n"
                "  ‚≠êÔ∏è –ó–∞ 50 –∑–≤–µ–∑–¥ —Ç–≥"
            )
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–∞–π–¥–∞
        await asyncio.sleep(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≥–∞–π–¥
        await client.send_file(
            user_id,
            'video.mp4',
            caption="üìπ **–ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:**"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º APK —Ñ–∞–π–ª—ã
        apk_files = ['app1.apk', 'app2.apk']
        for apk_file in apk_files:
            if os.path.exists(apk_file):
                await client.send_file(user_id, apk_file)
                await asyncio.sleep(0.5)
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@client.on(events.CallbackQuery)
async def button_handler(event):
    if event.data == b"check_subscription":
        await event.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...")
        
        user_id = event.sender_id
        is_subscribed = await check_user_subscription(user_id)
        
        if is_subscribed:
            await event.edit(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n"
                "üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã...",
                buttons=None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            success = await send_cheat_files(user_id)
            
            if not success:
                await event.respond(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    buttons=get_subscription_keyboard()
                )
            
        else:
            await event.edit(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
                buttons=get_subscription_keyboard()
            )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('KitRit-Premium-Version-0.5.0.1.lua'):
        print("‚ùå –§–∞–π–ª —á–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not os.path.exists('video.mp4'):
        print("‚ö†Ô∏è –í–∏–¥–µ–æ –≥–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º APK —Ñ–∞–π–ª—ã
    apk_files = ['app1.apk', 'app2.apk']
    apk_found = False
    for apk_file in apk_files:
        if os.path.exists(apk_file):
            apk_found = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω APK —Ñ–∞–π–ª: {apk_file}")
    
    if not apk_found:
        print("‚ö†Ô∏è APK —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
    await client.start(bot_token=config.BOT_TOKEN)
    print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram API")
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
